name: CI & Trigger Azure ML job (train + approve + register)

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  id-token: write

env:
  AZURE_ML_RESOURCE_GROUP: ${{ secrets.AZURE_ML_RESOURCE_GROUP }}
  AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  JOB_YML: src/job.yml
  TRAINING_DATA: ${{ secrets.AZURE_ML_TRAINING_DATA_PATH || '' }}
  MODEL_NAME: insurance_model
  PRIMARY_METRIC: f1

jobs:
  lint:
    name: Flake8 lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (for lint)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
          fi
          python -m pip install flake8

      - name: Run flake8
        run: |
          echo "Running flake8 on src/ and tests/"
          python -m flake8 src/ tests/ || (echo "Flake8 found issues" && exit 1)

  test:
    name: Pytest unit tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: lint
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (for tests)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install pytest pytest-cov

      - name: Run pytest
        run: |
          pytest -q --junitxml=reports/junit.xml -o log_cli=true -o log_cli_level=INFO

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: reports/

  submit-aml-job:
    name: Submit & monitor AML job, download outputs, compare metrics
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      job_id: ${{ steps.submit_job.outputs.job_id }}
      improved: ${{ steps.set_improved.outputs.improved }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites (Azure CLI + jq)
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          sudo apt-get update && sudo apt-get install -y jq

      - name: Azure login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure ML CLI extension
        run: |
          az extension remove -n ml || true
          az extension add -n ml --upgrade || true
          az --version
          az ml -h

      - name: Submit Azure ML job
        id: submit_job
        run: |
          echo "Submitting job from $JOB_YML"
          CMD="az ml job create --file \"$JOB_YML\" --resource-group \"$AZURE_ML_RESOURCE_GROUP\" --workspace-name \"$AZURE_ML_WORKSPACE_NAME\" --subscription $AZURE_SUBSCRIPTION_ID -o json"
          if [ -n "${TRAINING_DATA}" ]; then
            echo "Overriding inputs.training_data.path with: ${TRAINING_DATA}"
            CMD="$CMD --set inputs.training_data.path='${TRAINING_DATA}'"
          fi
          echo "Running: $CMD"
          JOB_JSON=$(eval $CMD)
          echo "$JOB_JSON" > job_submit_output.json
          JOB_ID=$(echo "$JOB_JSON" | jq -r '.name')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
          echo "::group::Job JSON"
          echo "$JOB_JSON"
          echo "::endgroup::"
          echo "Submitted job id: $JOB_ID"
          echo "Azure ML Studio URL (open in browser): https://ml.azure.com/jobs/$JOB_ID?workspaceName=$AZURE_ML_WORKSPACE_NAME"

      - name: Wait for job completion (polling)
        run: |
          set -euo pipefail
          JOB_ID=${{ steps.submit_job.outputs.job_id }}
          echo "Monitoring job: $JOB_ID"

          # Terminal states returned by az ml job show: Completed, Failed, Canceled, Running, NotStarted, etc.
          TERMINAL_STATES="Completed Failed Canceled"
          POLL_INTERVAL=20   # seconds between polls
          MAX_MINUTES=120    # safety timeout (adjust as needed)
          MAX_ITER=$(( (MAX_MINUTES * 60) / POLL_INTERVAL ))
          i=0

          while true; do
            ((i++))
            status=$(az ml job show --name "$JOB_ID" --resource-group "$AZURE_ML_RESOURCE_GROUP" --workspace-name "$AZURE_ML_WORKSPACE_NAME" --subscription "$AZURE_SUBSCRIPTION_ID" --query "status" -o tsv 2>/dev/null || echo "Unknown")
            timestamp=$(date --iso-8601=seconds)
            echo "[$timestamp] Job status: $status (poll #$i)"
            if [[ "$status" == "Completed" ]]; then
              echo "Job completed successfully."
              break
            fi
            if [[ "$status" == "Failed" ]] || [[ "$status" == "Canceled" ]] || [[ "$status" == "Cancelled" ]]; then
              echo "Job finished in terminal state: $status" >&2
              echo "Full job JSON:"
              az ml job show --name "$JOB_ID" --resource-group "$AZURE_ML_RESOURCE_GROUP" --workspace-name "$AZURE_ML_WORKSPACE_NAME" --subscription "$AZURE_SUBSCRIPTION_ID" -o json || true
              echo "Attempting to fetch tail of user logs (if available)..."
              az ml job download --name "$JOB_ID" --path azureml-logs/user_logs/std_log.txt --download-path job_logs --resource-group "$AZURE_ML_RESOURCE_GROUP" --workspace-name "$AZURE_ML_WORKSPACE_NAME" --subscription "$AZURE_SUBSCRIPTION_ID" || true
              if [[ -f job_logs/std_log.txt ]]; then
                echo "---- tail of std_log.txt ----"
                tail -n 200 job_logs/std_log.txt || true
                echo "---- end of std_log.txt ----"
              fi
              exit 1
            fi
            if [[ $i -ge $MAX_ITER ]]; then
              echo "Timed out waiting for job to finish after ${MAX_MINUTES} minutes." >&2
              az ml job show --name "$JOB_ID" --resource-group "$AZURE_ML_RESOURCE_GROUP" --workspace-name "$AZURE_ML_WORKSPACE_NAME" --subscription "$AZURE_SUBSCRIPTION_ID" -o json || true
              exit 2
            fi
            sleep $POLL_INTERVAL
          done

      - name: Download job outputs (model)
        run: |
          JOB_ID=${{ steps.submit_job.outputs.job_id }}
          mkdir -p downloaded_model
          echo "Downloading outputs/model from job $JOB_ID to downloaded_model/"
          az ml job download --name $JOB_ID --path outputs/model --download-path downloaded_model --resource-group $AZURE_ML_RESOURCE_GROUP --workspace-name $AZURE_ML_WORKSPACE_NAME --subscription $AZURE_SUBSCRIPTION_ID || true
          # normalize: if nested path exists, copy files to root downloaded_model/
          if [ -d downloaded_model/outputs/model ]; then
            cp -r downloaded_model/outputs/model/* downloaded_model/ || true
          fi
          find downloaded_model -maxdepth 3 -type f -name "metrics.json" -print || true
          ls -la downloaded_model || true

      - name: Upload downloaded model as artifact for later jobs
        uses: actions/upload-artifact@v4
        with:
          name: downloaded_model
          path: downloaded_model

      - name: Install Python deps for compare script
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade azure-ai-ml azure-identity

      - name: Run compare_metrics.py to see if F1 improved
        id: compare_metrics
        run: |
          python compare_metrics.py --model_dir downloaded_model --model_name "${{ env.MODEL_NAME }}" --primary_metric "${{ env.PRIMARY_METRIC }}" --subscription_id "${{ env.AZURE_SUBSCRIPTION_ID }}" --resource_group "${{ env.AZURE_ML_RESOURCE_GROUP }}" --workspace "${{ env.AZURE_ML_WORKSPACE_NAME }}"
          cat improved.txt || true

      - name: Set improved output for job
        id: set_improved
        run: |
          if [ -f improved.txt ]; then
            IMPROVED=$(cat improved.txt)
          else
            IMPROVED=false
          fi
          echo "improved=$IMPROVED" >> $GITHUB_OUTPUT
          echo "Improved: $IMPROVED"

  approval:
    name: Manual approval (only when improvement detected)
    needs: submit-aml-job
    runs-on: ubuntu-latest
    if: needs.submit-aml-job.outputs.improved == 'true'
    environment:
      name: model-registration
    steps:
      - name: Approval placeholder
        run: |
          echo "Model improvement detected. Waiting for manual approval in GitHub environment 'model-registration'."
          echo "Proceeding to registration after approval."

  register-model:
    name: Register model (runs after approval)
    needs: [submit-aml-job, approval]
    runs-on: ubuntu-latest
    if: needs.submit-aml-job.outputs.improved == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact (downloaded_model)
        uses: actions/download-artifact@v4
        with:
          name: downloaded_model
          path: downloaded_model

      - name: Install prerequisites for registration
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          sudo apt-get update && sudo apt-get install -y jq
          python -m pip install --upgrade pip
          python -m pip install --upgrade azure-ai-ml azure-identity

      - name: Azure login (Service Principal) for register step
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Register the model locally (register_local.py)
        run: |
          python register_local.py --model_dir downloaded_model --model_name "${{ env.MODEL_NAME }}" --primary_metric "${{ env.PRIMARY_METRIC }}" --subscription_id "${{ env.AZURE_SUBSCRIPTION_ID }}" --resource_group "${{ env.AZURE_ML_RESOURCE_GROUP }}" --workspace "${{ env.AZURE_ML_WORKSPACE_NAME }}"
