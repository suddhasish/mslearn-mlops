name: CI & Trigger Azure ML job
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  id-token: write

env:
  AZURE_ML_RESOURCE_GROUP: ${{ secrets.AZURE_ML_RESOURCE_GROUP }}
  AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
  JOB_YML: src/job.yml
  # Optional override for training data path
  TRAINING_DATA: ${{ secrets.AZURE_ML_TRAINING_DATA_PATH || '' }}

jobs:
  # ---------------------
  # Lint job (runs on PRs)
  # ---------------------
  lint:
    name: Flake8 lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (for lint)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
          fi
          # ensure flake8 is available
          python -m pip install flake8

      - name: Run flake8
        run: |
          # Lint source and tests folders; adjust paths if needed
          echo "Running flake8 on src/ and tests/"
          python -m flake8 src/ tests/ || (echo "Flake8 found issues" && exit 1)

  # --------------------
  # Tests job (runs on PRs)
  # --------------------
  test:
    name: Pytest unit tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: lint   # optional: run tests after lint passes; remove if you want parallel
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (for tests)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
          # ensure pytest is available
          python -m pip install pytest pytest-cov

      - name: Run pytest
        run: |
          # Run tests and produce junit xml for CI parsing if desired
          pytest -q --junitxml=reports/junit.xml -o log_cli=true -o log_cli_level=INFO
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: reports/

  # --------------------
  # Submit AML job (manual only)
  # --------------------
  submit-aml-job:
    name: Submit Azure ML job
    runs-on: ubuntu-latest
    # Only run the submit job when the workflow is manually dispatched.
    if: github.event_name == 'workflow_dispatch'
    needs: [lint, test]   # optional: require lint & tests to pass before manual submission; remove if not desired
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Install prerequisites (Azure CLI + jq)
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          sudo apt-get update && sudo apt-get install -y jq

      - name: Azure login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure ML extension
        run: |
          az extension remove -n ml || true
          az extension add -n ml --upgrade

      - name: Show Azure & ML versions
        run: |
          az --version
          az ml -h

      - name: Submit Azure ML job
        id: submit_job
        run: |
          echo "Submitting job from $JOB_YML"
          CMD="az ml job create --file \"$JOB_YML\" --resource-group \"$AZURE_ML_RESOURCE_GROUP\" --workspace-name \"$AZURE_ML_WORKSPACE_NAME\" -o json"
          if [ -n "${TRAINING_DATA}" ]; then
            echo "Overriding inputs.training_data.path with: ${TRAINING_DATA}"
            CMD="$CMD --set inputs.training_data.path='${TRAINING_DATA}'"
          fi
          echo "Running: $CMD"
          JOB_JSON=$(eval $CMD)
          echo "$JOB_JSON" > job_submit_output.json
          JOB_ID=$(echo "$JOB_JSON" | jq -r '.name')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
          echo "::group::Job JSON"
          echo "$JOB_JSON"
          echo "::endgroup::"
          echo "Submitted job id: $JOB_ID"
          echo "Azure ML Studio URL (open in browser): https://ml.azure.com/jobs/$JOB_ID?workspaceName=$AZURE_ML_WORKSPACE_NAME"

      - name: Print job link
        run: |
          echo "Job ID: ${{ steps.submit_job.outputs.job_id }}"
          echo "Open in Azure ML Studio: https://ml.azure.com/jobs/${{ steps.submit_job.outputs.job_id }}?workspaceName=${{ env.AZURE_ML_WORKSPACE_NAME }}"

      - name: Success message
        if: always()
        run: |
          echo "Workflow finished. Submitted job id: ${{ steps.submit_job.outputs.job_id }}"
